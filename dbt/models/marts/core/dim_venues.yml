version: 2

models:
  - name: dim_venues
    description: Venue dimension table for all sports
    tests:
      - unique:
          column_name: "venue_key || '-' || sport_type"
      - not_null:
          column_name: venue_key
    columns:
      - name: venue_name
        tests:
          - not_null
#          - unique_combination:
#              combination_of: [venue_name, venue_city, venue_state]
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[A-Za-z0-9\s\.\(\)]+(\s\([A-Za-z]+\))?(\.[a-z]+)?$'
              severity: warn

      - name: venue_city
        tests:
#          - not_null
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[A-Za-z\s\.-]*$'  # Allow empty values
              row_condition: "venue_city is not null"
              severity: warn

      - name: venue_state
        tests:
#          - not_null
          - dbt_expectations.expect_column_values_to_match_regex:
              regex: '^[A-Za-z]{1,3}$'
              row_condition: "venue_state is not null"
              severity: warn

      - name: is_indoor
        tests:
          - not_null
          - accepted_values:
              values: [true, false]

      - name: sport_type
        tests:
          - not_null
          - accepted_values:
              values: ['NBA', 'NFL', 'NHL', 'CFB']

      - name: valid_from
        tests:
          - not_null
#          - dbt_expectations.expect_column_values_to_be_between:
#              min_value: '2022-01-01'
#              max_value: '{{ var("max_date") }}'

      # Cross-validation tests
#      - name: venue_consistency
#        tests:
#          - dbt_utils.expression_is_true:
#              expression: "
#                (sport_type = 'NBA' and is_indoor = true) or
#                (sport_type = 'NHL' and is_indoor = true) or
#                sport_type in ('NFL', 'CFB')"
