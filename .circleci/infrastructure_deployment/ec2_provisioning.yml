version: 2.1

# Define reusable commands
commands:
  assume-role-with-oidc:
    description: "Assume AWS role using OIDC"
    steps:
      - aws-cli/setup:
          role-arn: arn:aws:iam::${secrets.AWS_ACCOUNT_ID}:role/${secrets.AWS_FEDERATED_USER_ROLE}
          aws-region: ${AWS_REGION}

jobs:
  ec2_provisioning:
    docker:
      - image: cimg/aws:2024.03   # base to aws
    steps:
      - checkout
      - assume-role-with-oidc
      - terraform/install:
          terraform_version: "1.5.0"
      - run:
          name: Initialize Terraform
          command: |
            cd terraform/ec2
            terraform init \
              -backend-config="bucket=${TF_STATE_BUCKET}" \
              -backend-config="key=${TF_STATE_KEY}" \
              -backend-config="region=${AWS_REGION}" \
              -backend-config="dynamodb_table=${TF_LOCK_TABLE}"
      - run:
          name: Plan Terraform Changes
          command: |
            cd terraform/ec2
            terraform plan \
              -var="vpc_id=${VPC_ID}" \
              -var="subnet_id=${SUBNET_ID}" \
              -var="key_pair_name=${KEY_PAIR}" \
              -var="iam_role_name=${IAM_ROLE}" \
              -var="vpc_cidr=${VPC_CIDR}" \
              -var="allowed_cidr_blocks=${ALLOWED_CIDRS}" \
              -out=tfplan

  terraform-apply:
    docker:
      - image: cimg/base:2024.01
    steps:
      - checkout
      - assume-role-with-oidc
      - terraform/install:
          terraform_version: "1.5.0"
      - run:
          name: Apply Terraform Changes
          command: |
            cd terraform/ec2
            terraform apply tfplan

workflows:
  ec2-deployment:
    jobs:
      - terraform-plan:
          context:
            - aws-oidc-context
            - terraform-context
      - approve-apply:
          type: approval
          requires:
            - terraform-plan
      - terraform-apply:
          requires:
            - approve-apply
          context:
            - aws-oidc-context
            - terraform-context